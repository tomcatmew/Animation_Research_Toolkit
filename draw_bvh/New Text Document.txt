		if (aToken[0] == "HIERARCHY") {
			assert(aBone.empty());
		}
		else if (aToken[0] == "ROOT") {
			assert(aBone.size() == 0);
			CRigBone br;
			assert(aToken.size() == 2);
			br.name = aToken[1];
			aBone.push_back(br);
		}
		else if (aToken[0] == "{") {
			stackIndBone.push_back(aBone.size() - 1);
			if (stackIndBone.size() > 1) {
				int ibp = stackIndBone[stackIndBone.size() - 2];
				int ib = aBone.size() - 1;
				aBone[ib].ibone_parent = ibp;
			}
		}
		else if (aToken[0] == "}") {
			stackIndBone.resize(stackIndBone.size() - 1);
		}
		else if (aToken[0] == "OFFSET") {
			assert(aToken.size() == 4);
			int ib = aBone.size() - 1;
			double org_x = rig_v3q::myStod(aToken[1]);
			double org_y = rig_v3q::myStod(aToken[2]);
			double org_z = rig_v3q::myStod(aToken[3]);
			aBone[ib].invBindMat[3] = -org_x;
			aBone[ib].invBindMat[7] = -org_y;
			aBone[ib].invBindMat[11] = -org_z;
			if (stackIndBone.size() > 1) {
				const int ibp = stackIndBone[stackIndBone.size() - 2];
				assert(ibp < (int)aBone.size());
				aBone[ib].invBindMat[3] += aBone[ibp].invBindMat[3];
				aBone[ib].invBindMat[7] += aBone[ibp].invBindMat[7];
				aBone[ib].invBindMat[11] += aBone[ibp].invBindMat[11];
			}
		}
		else if (aToken[0] == "CHANNELS") {
			assert(aToken.size() >= 2);
			int nch = rig_v3q::myStoi(aToken[1]);
			assert((int)aToken.size() == nch + 2);
			assert(!aBone.empty());
			const std::size_t ib = aBone.size() - 1;
			for (int ich = 0; ich < nch; ++ich) {
				const std::string& type_ch = aToken[ich + 2];
				if (type_ch == "Xposition") { aChannelRotTransBone.emplace_back(ib, 0, false); }
				else if (type_ch == "Yposition") { aChannelRotTransBone.emplace_back(ib, 1, false); }
				else if (type_ch == "Zposition") { aChannelRotTransBone.emplace_back(ib, 2, false); }
				else if (type_ch == "Xrotation") { aChannelRotTransBone.emplace_back(ib, 0, true); }
				else if (type_ch == "Yrotation") { aChannelRotTransBone.emplace_back(ib, 1, true); }
				else if (type_ch == "Zrotation") { aChannelRotTransBone.emplace_back(ib, 2, true); }
				else {
					std::cout << "ERROR-->undefiend type" << std::endl;
				}
			}
		}
		else if (aToken[0] == "JOINT") {
			CRigBone br;
			assert(aToken.size() == 2);
			br.name = aToken[1];
			aBone.push_back(br);
		}
		else if (aToken[0] == "End") {
			assert(aToken[1] == "Site");
			CRigBone br;
			assert(aToken.size() == 2);
			br.name = aToken[1];
			aBone.push_back(br);
		}
		else if (aToken[0] == "MOTION") {
			break;
		}
	}
	nframe = 0;
	{
		std::string stmp0;
		{
			std::getline(fin, line);
			std::stringstream ss(line);
			ss >> stmp0 >> nframe;
			//      std::cout << "frame: " << nframe << std::endl;
		}
		std::getline(fin, line);
		//    std::cout << "frametime: " << line << std::endl;
	}
	const int nchannel = aChannelRotTransBone.size();
	aValueRotTransBone.resize(nframe * nchannel);
	for (int iframe = 0; iframe < nframe; ++iframe) {
		std::getline(fin, line);
		line = rig_v3q::MyReplace(line, '\t', ' ');
		if (line[line.size() - 1] == '\n') line.erase(line.size() - 1); // remove the newline code
		if (line[line.size() - 1] == '\r') line.erase(line.size() - 1); // remove the newline code
		std::vector<std::string> aToken = rig_v3q::MySplit(line, ' ');
		//    std::cout << aToken.size() << " " << aChannelRotTransBone.size() << std::endl;
		assert(aToken.size() == aChannelRotTransBone.size());
		for (int ich = 0; ich < nchannel; ++ich) {
			aValueRotTransBone[iframe * nchannel + ich] = rig_v3q::myStod(aToken[ich]);
		}
	}
	// ---------------
	for (std::size_t ibone = 0; ibone < aBone.size(); ++ibone) {
		CRigBone& bone = aBone[ibone];
		bone.scale = 1.0;
		bone.quatRelativeRot[0] = 1.0;
		bone.quatRelativeRot[1] = 0.0;
		bone.quatRelativeRot[2] = 0.0;
		bone.quatRelativeRot[3] = 0.0;
		bone.transRelative[0] = 0.0;
		bone.transRelative[1] = 0.0;
		bone.transRelative[2] = 0.0;
		if (bone.ibone_parent != -1) {
			const CRigBone& bone_p = aBone[bone.ibone_parent];
			bone.transRelative[0] = (-bone.invBindMat[3]) - (-bone_p.invBindMat[3]);
			bone.transRelative[1] = (-bone.invBindMat[7]) - (-bone_p.invBindMat[7]);
			bone.transRelative[2] = (-bone.invBindMat[11]) - (-bone_p.invBindMat[11]);
		}
	}
	for (auto& bone : aBone) {
		for (int i = 0; i < 16; ++i) { bone.affmat3Global[i] = bone.invBindMat[i]; }
		int info; rig_v3q::CalcInvMat(bone.affmat3Global, 4, info);
	}